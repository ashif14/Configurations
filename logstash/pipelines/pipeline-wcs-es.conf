input {
  beats {
    port => 5044
    type => "log"
    id => "filebeat_1"
  }
}

filter {
    # If log file is SystemOut
    if [fields][log_type] == "SystemOut" {
        grok {
            patterns_dir => ["../patterns"]
			
			match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{DATA:message} %{SPACE}REQ_%{REQ_STATUS:request_status} %{SPACE}%{WORD:transaction_id}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{SPACE}%{SPACE}%{WORD:was_errorcode}: %{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{SPACE}%{SPACE} \[%{GREEDYDATA:was_sibbus}\] +%{WORD:was_errorcode}: %{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{GREEDYDATA:message2} +%{WORD:was_errorcode}: %{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{GREEDYDATA:message2}\) +%{WORD:was_errorcode} +%{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{GREEDYDATA:message}"]
            overwrite => [ "message" ]
        }
        date{
            match => ["timestamp", "dd/MM/YY HH:mm:ss:SSS", "M/d/YY HH:mm:ss:SSS", "MM/d/YY HH:mm:ss:SSS", "M/dd/YY HH:mm:ss:SSS", "MM/dd/YY H:mm:ss:SSS", "M/d/YY H:mm:ss:SSS", "MM/d/YY H:mm:ss:SSS", "M/dd/YY H:mm:ss:SSS"]
        }

        if [request_status] == "START" {
            mutate {
                add_tag => ["REQ_START"]
            }
        } else if [request_status] == "END" {
            # elasticsearch {
            #     hosts => ["localhost:9200"]
            #     user => elastic
            #     password => elastic
            #     index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
            #     query => "request_status:START AND was_threadID:%{[was_threadID]}"
            #     fields => { "@timestamp" => "started" }    
            # }
            # date {
            #     match => ["[started]", "ISO8601"]
            #     target => "[started]"
            # }
            # ruby {
            #  code => "event['duration_hrs'] = (event['@timestamp'] - event['started']) / 3600 rescue nil"
            # }
        } else { # If request is not start or end
         elasticsearch {
            hosts => ["localhost:9200"]
            user => elastic
            password => elastic
            # index => "filebeat-gtx"
            index => "filebeat-gtx"
            query => "request_status:START AND was_threadID:%{was_threadID}"
            enable_sort => false
            fields => { "transaction_id" => "GTX_ID" }            
         }
         ruby {
            code => 'event.set("transaction_id", event.get("GTX_ID"))'
         }
        }
    }
}

output {

    if "REQ_START" in [tags] {
     elasticsearch {
        hosts => ["localhost:9200"]
        user => elastic
        password => elastic
        manage_template => false
        index => "filebeat-gtx"
        document_type => "%{[@metadata][type]}"
     }
    }

   elasticsearch {
    hosts => ["localhost:9200"]
    # Elastic Credentials
    user => elastic
    password => elastic
	manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
	document_type => "%{[@metadata][type]}"
 }
}