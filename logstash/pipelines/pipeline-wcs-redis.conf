input {
  beats {
    port => 5044
    type => "log"
    id => "filebeat_1"
  }
}

filter {
    # If log file is SystemOut
    if [fields][log_type] == "SystemOut" {
        grok {
            patterns_dir => ["../patterns"]
			
			match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{DATA:message} %{SPACE}REQ_%{REQ_STATUS:request_status} %{SPACE}%{WORD:transaction_id}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{SPACE}%{SPACE}%{WORD:was_errorcode}: %{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{SPACE}%{SPACE} \[%{GREEDYDATA:was_sibbus}\] +%{WORD:was_errorcode}: %{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{GREEDYDATA:message2} +%{WORD:was_errorcode}: %{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{GREEDYDATA:message2}\) +%{WORD:was_errorcode} +%{SPACE}%{GREEDYDATA:message}"]
            match => ["message", "\[%{DATA:timestamp} %{WORD:tz}\] %{BASE16NUM:was_threadID} %{WORD:was_shortname} %{SPACE}%{WORD:was_loglevel} %{SPACE}%{GREEDYDATA:message}"]
            overwrite => [ "message" ]
        }
        date{
            match => ["timestamp", "dd/MM/YY HH:mm:ss:SSS", "M/d/YY HH:mm:ss:SSS", "MM/d/YY HH:mm:ss:SSS", "M/dd/YY HH:mm:ss:SSS", "MM/dd/YY H:mm:ss:SSS", "M/d/YY H:mm:ss:SSS", "MM/d/YY H:mm:ss:SSS", "M/dd/YY H:mm:ss:SSS"]
        }

       # If Request is just Started with REQ_START GTX_{some_id} then store transaction_id mapping with current threadID
        if [request_status] == "START" {
            mutate {
                add_tag => ["REQ_START"]
            }
        } else if [request_status] == "END" {  # if Request has ended with REQ_END tag set event threadID map to nil
            # ruby {
            #     code => "@@map[event.get('was_threadID')] = nil"
            # }

        } else { # Else Attach transaction_id based on current threadID
            ruby  {
                init => "
                    require 'redis'
                    require 'json'
                    rc = Redis.new
                    "
                code => "
                    v = JSON.parse(rs.lindex('thread-'+event.get('was_threadID'),0))
                    event.set('transaction_id',v['transaction_id'])
                    "
            }
        }
    }

}

output {

    if "REQ_START" in [tags] {
        redis {
            id => "redis_output"
            host => ["127.0.0.1:6379"]
            codec => "json"
            data_type => "list"            
            key => "thread-%{was_threadID}" 
        }
    }
  elasticsearch {
    hosts => ["localhost:9200"]
    # Elastic Credentials
    # user => elastic
    # password => elastic
	manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
	document_type => "%{[@metadata][type]}"
 }
}